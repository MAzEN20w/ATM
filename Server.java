/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package atmgui;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import static java.lang.Integer.parseInt;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Scanner;
import java.util.StringTokenizer;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author mazen
 */
public class Server extends javax.swing.JFrame {
	// Vector to store active clients
	static Vector<ClientHandler> ar = new Vector<>();
	
	// counter for clients
	static int i = 1;
 

    /**
     * Creates new form Server
     */
    public Server() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 373, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     * @throws java.io.IOException
     */
    public static void main(String args[]) throws IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Server().setVisible(true);
           
              
            }
        });
        
         ServerSocket s = new ServerSocket(7777); 
              Socket ss ; //to accept the connection between server &amp; client
             while (true){
                  ss = s.accept();
             
              jTextArea2.append(" Connected: "+i+"\n");

              DataInputStream in = new DataInputStream(ss.getInputStream()); 

              DataOutputStream outToServer = new DataOutputStream(ss.getOutputStream());
               // Create a new handler object for handling this request.
			ClientHandler mtch = new ClientHandler(ss,"client" + i, in, outToServer);

			// Create a new Thread with this object.
			Thread t = new Thread(mtch);
                        // add this client to active clients list
			ar.add(mtch);
                        // start the thread.
			t.start();

			
			i++;}}


    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane2;
    public static javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables
}
class ClientHandler implements Runnable
{
	Scanner scn = new Scanner(System.in);
	private String name;
	final DataInputStream dis;
	final DataOutputStream dos;
	Socket s;
	boolean isloggedin;
	int balance=5000;
        	int wd=7000;
     public static float doll=0;

	// constructor
	public ClientHandler(Socket s, String name,DataInputStream dis, DataOutputStream dos) {
		this.dis = dis;
		this.dos = dos;
		this.name = name;
		this.s = s;
		this.isloggedin=true;              
	}

	@Override
	public void run() {

		String received="";
		while (true)
		{
                    try {
                
received = dis.readUTF();
                    } catch (IOException ex) {
                        Logger.getLogger(ClientHandler.class.getName()).log(Level.SEVERE, null, ex);
                    }
				
				System.out.println(received);
				
				if(received.equals("logout")){
					this.isloggedin=false;
                        try {
                            this.s.close();
                        } catch (IOException ex) {
                            Logger.getLogger(ClientHandler.class.getName()).log(Level.SEVERE, null, ex);
                        }
					break;
				}
				
				// break the string into message and recipient part
				StringTokenizer st = new StringTokenizer(received, "#");
				String op = st.nextToken();
                                  if("Login".equals(op)){
                                   String username = st.nextToken();
                                   String password = st.nextToken();

                                  if ("hhh".equals(username) && "111".equals(password) )
                  {Server.jTextArea2.append ("Login client1\n");
                                       try {
                                           dos.writeUTF("Login client1");
                                       } catch (IOException ex) {
                                           Logger.getLogger(ClientHandler.class.getName()).log(Level.SEVERE, null, ex);
                                       }
                                       

                     
                  }         else if ("mmm".equals(username) && "222".equals(password) )
                  {Server.jTextArea2.append ("Login client2\n");
                                       try {
                                           dos.writeUTF("Login client2");
                                       } catch (IOException ex) {
                                           Logger.getLogger(ClientHandler.class.getName()).log(Level.SEVERE, null, ex);
                                       }
                                       

                     
                  }         if ("zzz".equals(username) && "333".equals(password) )
                  {Server.jTextArea2.append ("Login client3\n");
                                       try {
                                           dos.writeUTF("Login client3");
                                       } catch (IOException ex) {
                                           Logger.getLogger(ClientHandler.class.getName()).log(Level.SEVERE, null, ex);
                                       }}
                  else 
                  {
                                       try {
                                          Server.jTextArea2.append ("Login failed\n");
                                           dos.writeUTF("Login failed");
                                       } catch (IOException ex) {
                                           Logger.getLogger(ClientHandler.class.getName()).log(Level.SEVERE, null, ex);
                                       }
                  }
                                  
                                  
                                  
                                  
                                  }    else if ("show balance".equals(op)){
                                      Server.jTextArea2.append ("show balance\n");
                        try {
                            dos.writeUTF("Your Balance is "+String.valueOf(balance));
                        } catch (IOException ex) {
                            Logger.getLogger(ClientHandler.class.getName()).log(Level.SEVERE, null, ex);
                        }
                System.out.println("Your Balance is "+String.valueOf(balance));
            }
            else  if ("withdraw".equals(op)){
                {String nn = st.nextToken();
                int num=parseInt(nn);
                    if(balance > num && wd<=7000){
                        balance = balance - num;
                        wd=wd+num;
                    try {
                        dos.writeUTF("you withdraw "+nn+"Your Balance is "+String.valueOf(balance));
                    } catch (IOException ex) {
                        Logger.getLogger(ClientHandler.class.getName()).log(Level.SEVERE, null, ex);
                    }

                        System.out.println(balance);

                    }

                    else

                    {
                    try {
                        dos.writeUTF("Insufficient funds\n");
                    } catch (IOException ex) {
                        Logger.getLogger(ClientHandler.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    }
                }
            }
            else if ( "deposite".equals(op)){
                Server.jTextArea2.append ("show balance");
                String nn = st.nextToken();
                 Server.jTextArea2.append ("deposit "+nn);
              
                int num=parseInt(nn);
                balance = balance + num;
                        try {
                            dos.writeUTF("your balance= "+balance+"\n");
                        } catch (IOException ex) {
                            Logger.getLogger(ClientHandler.class.getName()).log(Level.SEVERE, null, ex);
                        }

            }
            else  if ("transfare".equals(op)){
                
                String nn = st.nextToken();
                  int num=parseInt(nn);
               String to = st.nextToken();
               
                                      System.out.println(to);
                for (ClientHandler mc : Server.ar)
				{
                                
                                     if (mc.name.equals(to) && mc.isloggedin==true)
                    {
                                            

                                            if (balance>=num) {
                                            balance-=num;
                                             mc.balance+=num;
                                                try {
                                                    dos.writeUTF("Transfer to "+to+" : "+nn);
                                                    
                                                } catch (IOException ex) {
                                                    Logger.getLogger(ClientHandler.class.getName()).log(Level.SEVERE, null, ex);
                                                }
                                                Server.jTextArea2.append (this.name+"Transfers money to  "+mc.name+" With "+nn+"\n");
                        break;
                                            }
                                            else{
                                                try {
                                                    dos.writeUTF("Insufficient balance"+" Your balance is : "+balance);
                                                } catch (IOException ex) {
                                                    Logger.getLogger(ClientHandler.class.getName()).log(Level.SEVERE, null, ex);
                                                }
                                                Server.jTextArea2.append ("Insufficient balance"+" Your balance is : "+balance+"\n");
                                            }

                    }
                                
                                }


            }
            else  if ("convert to $".equals(op)){
                String nn = st.nextToken();
                int num=parseInt(nn);
                balance =balance-num;
                doll=doll+(num/15);
                 Server.jTextArea2.append ("convert  "+num+"\n ");

                 Server.jTextArea2.append ("you have  "+doll+" dollars in your account\n ");
                        try {
                            dos.writeUTF("you have  "+doll+" dollars in your account\n ");
                        } catch (IOException ex) {
                            Logger.getLogger(ClientHandler.class.getName()).log(Level.SEVERE, null, ex);
                        }
            }
            else if(  "charge phone".equals(op)){
                 String nn = st.nextToken();
                int num=parseInt(nn);
                balance=balance-num;
                        try {
                            dos.writeUTF("you have charged"+num+" to your phone\n ");
                        } catch (IOException ex) {
                            Logger.getLogger(ClientHandler.class.getName()).log(Level.SEVERE, null, ex);
                        }
            }
            

    ////          
              }
//				
			
		
		try
		{
//			 closing resources
			this.dis.close();
			this.dos.close();
			
		}catch(IOException e){
			e.printStackTrace();
		}
	}}
//}

